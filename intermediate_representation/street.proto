// e8City
// Copyright (C) 2023 e8yes
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package e8;

import "intermediate_representation/curve.proto";

// Represents the traffic markings on a street.
message TrafficMarking {
    // All available traffic marking types.
    enum MarkingType {
        STREET_MARKING_TYPE_UNKNOWN = 0;
        ARROW_STRAIGHT = 1;
        ARROW_STRAIGHT_OR_LEFT_TURN = 2;
        ARROW_STRAIGHT_OR_RIGHT_TURN = 3;
        ARROW_LEFT_TURN = 4;
        ARROW_LEFT_TURN_OR_U_TURN = 5;
        ARROW_RIGHT_TURN = 6;
        DASHED_WHITE = 7;
        HOLLOW = 8;
        SOLID_WHITE = 9;
        SOLID_YELLOW = 10;
    }

    // The curve segment for which to apply the marking.
    ArcInterval arc_interval = 1;

    // The type of traffic marking to apply.
    MarkingType marking_type = 2;
}

// Represents a curve with traffic markings.
message MarkedCurve {
    // The curve to be marked.
    CatmulRomCurve3 curve = 1;

    // The markings to apply to different partitions of the curve.
    repeated TrafficMarking markings = 2;
}

// Represents a traffic lane.
message TrafficLane {
    // Index to TrafficWay::marked_curves, indicating the leftmost boundary of
    // the traffic lane.
    int32 left_curve_index = 1;

    // Index to TrafficWay::marked_curves, indicating the center of the traffic
    // lane.
    int32 center_curve_index = 2;

    // Index to TrafficWay::marked_curves, indicating the rightmost boundary of
    // the traffic lane.
    int32 right_curve_index = 3;

    // A list of segments on the left curve which allows legal lane change to
    // the left adjacent lane.
    repeated ArcInterval left_lane_change_windows = 4;

    // A list of segments on the left curve which allows legal lane change to
    // the right adjacent lane.
    repeated ArcInterval right_lane_change_windows = 5;

    // A list of left adjacent lanes corresponding to the
    // left_lane_change_windows.
    repeated TrafficLane left_adjacent_lanes = 6;

    // A list of left adjacent lanes corresponding to the
    // right_lane_change_windows.
    repeated TrafficLane right_adjacent_lanes = 7;
}

// A traffic way enables the transportation from one end of a street to the
// other.
message TrafficWay {
    // All the marked curves in the traffic way.
    repeated MarkedCurve marked_curves = 1;

    // All traffic lanes that can be accessed from the beginning of the traffic
    // way.
    repeated TrafficLane root_lanes = 2;
}

// Represents the geometry and the semantics associated with a street.
message Street {
    // The curve which runs down the center of the street.
    CatmulRomCurve3 center_curve = 1;

    // A list of traffic ways in the street. A street can only be one-way or
    // two-way.
    repeated TrafficWay traffic_ways = 2;
}
