// e8City
// Copyright (C) 2023 e8yes
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

package e8;

import "intermediate_representation/curve.proto";
import "intermediate_representation/segment.proto";
import "intermediate_representation/space.proto";

// Stores the information about one of the extremities of a street.
message StreetCut {
    // The line segment which closes the extremity.
    Segment3 cut_line = 1;

    // The unit vector which points away from the street at the extremity. It's
    // also orthogonal to the cut line.
    Vector3 outward_facing = 2;

    // Indicates if there is a pedestrian crossing at the extremity.
    bool pedestrian_crossing = 3;

    // Indicates if there is a traffic light at the extremity.
    bool traffic_light = 4;

    // Indicates if it allows left-turn at the extremity.
    bool allow_left_turn = 5;

    // Indicates if it allows right-turn at the extremity.
    bool allow_right_turn = 6;

    // Indicates if it allows unprotected left-turn at the extremity.
    bool unprotected_left_turn = 7;

    // Indicates if it allows unprotected right-turn at the extremity.
    bool unprotected_right_turn = 8;
}

// Represents the connectivities between the inbound and outbound traffic.
message TrafficConnection {
    // The inbound traffic way from which the intersection connects.
    string inbound_traffic_way_id = 1;

    // The zero-indexed lane number from which the intersection connects.
    int32 lane_number = 2;

    // The outbound traffic way to which the intersection connnects.
    string outbound_traffic_way_id = 3;
}

// Represents a standard street intersection. A standard intersection has
// streets connecting directly towards the center of the intersection.
message StandardIntersection {
    // The center location of the intersection.
    Point3 center = 1;

    // The information which tells how each street is connected to the
    // intersection. The corresponding streets are in counter-clockwise order.
    repeated StreetCut street_cuts = 2;

    // The geometry of the boundary which connects from street_cuts[i % len] to
    // street_cuts[(i + 1) % len].
    repeated CatmulRomCurve3 boundaries = 3;

    // The connectivities between the inbound and outbound traffic.
    repeated TrafficConnection connections = 4;
}

// Encapsulates different types of intersection.
message Intersection {
    oneof intersection {
        // Represents a standard streeet intersection.
        StandardIntersection standard = 1;
    }
}
